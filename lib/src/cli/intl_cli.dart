part of 'cli.dart';

class IntlCli extends _CliHelper {
  IntlCli(super.path, super.logger);

  Future<void> init(String locale) async {
    if (hasNoErrors()) {
      await _createl10n();
      await _updatePubspec();
      //flutter pub add intl
      await Cli.run("flutter", ["pub", "add", "intl"], workingDirectory: path);
      //flutter gen-l10n en
      await Cli.run("flutter", ["gen-l10n", locale], workingDirectory: path);
      await FlutterCli.pubGet();
    }
  }
}

void main() async {
  _CliHelper(Directory.current.path, Logger())._updatePubspec();
}

class _CliHelper {
  final String path;
  final Logger logger;

  _CliHelper(this.path, this.logger);

  bool hasNoErrors() {
    if (File("$path/l10n.yaml").existsSync()) {
      throw Exception(
        "You have already set up internalization",
      );
    }

    return true;
  }

  ///Update the pubspec.yaml file
  Future<void> _updatePubspec() async {
    /*
    # Internationalization support.
  flutter_localizations:
    sdk: flutter
  intl: 0.16.1
  # the rest of your dependencies
flutter:
  # Adds code generation (synthetic package) support 
  generate: true
    */
    final file = File("$path/pubspec.yaml");
    final pubspecYaml = file.readAsLinesSync();
    final depIndex = pubspecYaml.indexOf("dependencies:");
    pubspecYaml.insertAll(depIndex + 1, [
      "  # Internationalization support.",
      "  flutter_localizations:",
      "    sdk: flutter",
    ]);
    final flutterIndex = pubspecYaml.indexOf("flutter:");
    pubspecYaml.insertAll(flutterIndex + 1, [
      "  # Adds code generation support",
      "  generate: true",
    ]);
    file
      ..deleteSync()
      ..createSync()
      ..writeAsString(pubspecYaml.fold(
          "",
          (previousValue, element) => """
$previousValue
$element"""));
  }

  ///Create the l10n.yaml file
  Future<void> _createl10n() async {
    try {
      final file = await File("$path/l10n.yaml").create();
      /*
      # !!<<This file generated, please try not to change anything here>>!!
      # See also: https://docs.google.com/document/d/10e0saTfAv32OZLRmONy866vnaw0I2jwL8zukykpgWBc/edit#

      # `arb-dir` specifies the directory where the tool expects to find input files. 
      # This directory will contain “.arb” format message catalogs.
      arb-dir: lib/l10n
      # `template-arb-file` A message catalog that defines all of the messages your 
      # application supports as well as metadata for each message. 
      # This file must be created in the arb-dir.
      template-arb-file: app_en.arb
      # `output-localization-file` defines the main Dart class file that the tool will 
      # generate and your application will import. All of the files generated by the tool 
      # will be generated in `arb-dir`.
      output-localization-file: app_localizations.dart


      # if you want to add more parameters then here is a list with explanations.
      # https://docs.google.com/document/d/10e0saTfAv32OZLRmONy866vnaw0I2jwL8zukykpgWBc/edit#heading=h.upij01jgi58m
      */
      file.writeAsStringSync(
          """# !!<<This file generated, please try not to change anything here>>!!
# See also: https://docs.google.com/document/d/10e0saTfAv32OZLRmONy866vnaw0I2jwL8zukykpgWBc/edit#
        
# `arb-dir` specifies the directory where the tool expects to find input files. 
# This directory will contain “.arb” format message catalogs.
arb-dir: lib/l10n

# `template-arb-file` A message catalog that defines all of the messages your 
# application supports as well as metadata for each message. 
# This file must be created in the arb-dir.
template-arb-file: app_en.arb

# `output-localization-file` defines the main Dart class file that the tool will 
# generate and your application will import. All of the files generated by the tool 
# will be generated in `arb-dir`.
output-localization-file: app_localizations.dart

# if you want to add more parameters then here is a list with explanations.
# https://docs.google.com/document/d/10e0saTfAv32OZLRmONy866vnaw0I2jwL8zukykpgWBc/edit#heading=h.upij01jgi58m
""");
      logger.progress("Create $path/l10n.yaml");
    } catch (e) {
      rethrow;
    }
  }
}
